package com.xsecret.service;

import com.xsecret.service.lottery.LotteryResultAutoImportService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;

/**
 * Service ƒë·ªÉ ch·∫°y c√°c task t·ª± ƒë·ªông theo l·ªãch
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduledTaskService {

    private final BetService betService;
    private final LotteryResultAutoImportService lotteryResultAutoImportService;
    private final LotteryResultService lotteryResultService;
    
    // Timezone Vietnam
    private static final ZoneId VN_ZONE = ZoneId.of("Asia/Ho_Chi_Minh");
    
    // Track import success state by date to avoid duplicate imports
    private final Map<String, Boolean> mienBacImportSuccess = new HashMap<>();
    private final Map<String, Boolean> provinceImportSuccess = new HashMap<>();

    /**
     * Check bet results automatically - ch·∫°y l√∫c 18:30 m·ªói ng√†y
     * Sau khi auto import k·∫øt qu·∫£ x·ªï s·ªë xong (18:20-18:50)
     */
    @Scheduled(cron = "0 30 18 * * ?", zone = "Asia/Ho_Chi_Minh")
    public void checkBetResultsAt1830() {
        try {
            log.info("üîÑ Scheduled task [18:30]: Starting automatic bet result check...");
            betService.checkBetResults();
            log.info("‚úÖ Scheduled task [18:30]: Bet result check completed successfully");
        } catch (Exception e) {
            log.error("‚ùå Scheduled task [18:30]: Error during automatic bet result check", e);
        }
    }

    /**
     * Auto import Mi·ªÅn B·∫Øc - ch·∫°y m·ªói ph√∫t t·ª´ 18:20 ƒë·∫øn 18:50
     * Retry logic: n·∫øu fail th√¨ retry m·ªói 1 ph√∫t cho ƒë·∫øn 18:50
     */
    @Scheduled(cron = "0 */1 18 * * ?", zone = "Asia/Ho_Chi_Minh")
    public void autoImportMienBac() {
        LocalTime now = LocalTime.now(VN_ZONE);
        String today = LocalDate.now(VN_ZONE).toString();
        
        // Ch·ªâ ch·∫°y t·ª´ 18:20 ƒë·∫øn 18:50
        if (now.isBefore(LocalTime.of(18, 20)) || now.isAfter(LocalTime.of(18, 50))) {
            return;
        }
        
        // N·∫øu ƒë√£ import th√†nh c√¥ng h√¥m nay r·ªìi th√¨ skip
        if (Boolean.TRUE.equals(mienBacImportSuccess.get(today))) {
            return;
        }
        
        try {
            log.info("üé≤ Auto importing Mi·ªÅn B·∫Øc lottery result at {}", now);
            lotteryResultAutoImportService.autoImportMienBac();
            
            // Mark success
            mienBacImportSuccess.put(today, true);
            log.info("‚úÖ Mi·ªÅn B·∫Øc import SUCCESS at {}", now);
            
            // Clean up old dates (keep only today)
            mienBacImportSuccess.keySet().removeIf(date -> !date.equals(today));
            
        } catch (Exception e) {
            log.error("‚ùå Mi·ªÅn B·∫Øc import failed at {}: {}", now, e.getMessage());
            
            // N·∫øu ƒë√£ h·∫øt th·ªùi gian retry (18:50) th√¨ alert
            if (now.isAfter(LocalTime.of(18, 49))) {
                log.error("üö® ALERT: Mi·ªÅn B·∫Øc import FAILED after all retries! Please check manually.");
            }
        }
    }

    /**
     * Auto import Mi·ªÅn Trung/Nam - ch·∫°y m·ªói ph√∫t t·ª´ 17:20 ƒë·∫øn 17:50
     * Retry logic: n·∫øu fail th√¨ retry m·ªói 1 ph√∫t cho ƒë·∫øn 17:50
     */
    @Scheduled(cron = "0 */1 17 * * ?", zone = "Asia/Ho_Chi_Minh")
    public void autoImportProvinces() {
        LocalTime now = LocalTime.now(VN_ZONE);
        String today = LocalDate.now(VN_ZONE).toString();
        
        // Ch·ªâ ch·∫°y t·ª´ 17:20 ƒë·∫øn 17:50
        if (now.isBefore(LocalTime.of(17, 20)) || now.isAfter(LocalTime.of(17, 50))) {
            return;
        }
        
        // N·∫øu ƒë√£ import th√†nh c√¥ng h√¥m nay r·ªìi th√¨ skip
        if (Boolean.TRUE.equals(provinceImportSuccess.get(today))) {
            return;
        }
        
        try {
            log.info("üé≤ Auto importing all provinces lottery results at {}", now);
            lotteryResultAutoImportService.autoImportAllProvinces();
            
            // Mark success
            provinceImportSuccess.put(today, true);
            log.info("‚úÖ All provinces import SUCCESS at {}", now);
            
            // Clean up old dates (keep only today)
            provinceImportSuccess.keySet().removeIf(date -> !date.equals(today));
            
        } catch (Exception e) {
            log.error("‚ùå Provinces import failed at {}: {}", now, e.getMessage());
            
            // N·∫øu ƒë√£ h·∫øt th·ªùi gian retry (17:50) th√¨ alert
            if (now.isAfter(LocalTime.of(17, 49))) {
                log.error("üö® ALERT: Provinces import FAILED after all retries! Please check manually.");
            }
        }
    }

    /**
     * Auto cancel expired bets - ch·∫°y l√∫c 20:00 m·ªói ng√†y
     * Logic:
     * 1. Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ trong DB ch∆∞a
     * 2. N·∫øu c√≥ ‚Üí Check bet tr∆∞·ªõc, sau ƒë√≥ cancel bet c√≤n PENDING
     * 3. N·∫øu kh√¥ng ‚Üí Cancel t·∫•t c·∫£ bet PENDING v√† ho√†n ti·ªÅn
     */
    @Scheduled(cron = "0 0 20 * * ?", zone = "Asia/Ho_Chi_Minh")
    public void autoCancelExpiredBets() {
        try {
            log.info("üîÑ Scheduled task [20:00]: Starting auto cancel expired bets...");
            
            String today = LocalDate.now(VN_ZONE).toString();
            
            // Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ Mi·ªÅn B·∫Øc trong DB ch∆∞a
            boolean hasMienBacResult = lotteryResultService.hasPublishedResult("mienBac", null, today);
            
            if (hasMienBacResult) {
                log.info("‚úÖ Found Mi·ªÅn B·∫Øc result in DB. Checking bets before cancel...");
                
                // Check bet tr∆∞·ªõc khi cancel (c√≥ th·ªÉ c√≥ k·∫øt qu·∫£ m·ªõi ƒë∆∞·ª£c import)
                try {
                    betService.checkBetResults();
                    log.info("‚úÖ Bet check completed before auto cancel");
                } catch (Exception e) {
                    log.error("‚ùå Error checking bets before auto cancel: {}", e.getMessage());
                }
                
                // Sau ƒë√≥ cancel c√°c bet v·∫´n c√≤n PENDING
                int cancelledCount = betService.autoCancelExpiredBets();
                log.info("‚úÖ Auto cancelled {} remaining pending bets (after check)", cancelledCount);
            } else {
                log.warn("‚ö†Ô∏è No Mi·ªÅn B·∫Øc result found in DB. Cancelling all pending bets...");
                
                // Kh√¥ng c√≥ k·∫øt qu·∫£ ‚Üí Cancel t·∫•t c·∫£
                int cancelledCount = betService.autoCancelExpiredBets();
                log.info("‚úÖ Auto cancelled {} pending bets (no result available)", cancelledCount);
            }
            
        } catch (Exception e) {
            log.error("‚ùå Scheduled task [20:00]: Error during auto cancel expired bets", e);
        }
    }

    /**
     * Reset import success flags v√†o ƒë·∫ßu ng√†y m·ªõi (00:01)
     */
    @Scheduled(cron = "0 1 0 * * ?", zone = "Asia/Ho_Chi_Minh")
    public void resetImportFlags() {
        mienBacImportSuccess.clear();
        provinceImportSuccess.clear();
        log.info("üîÑ Reset lottery import flags for new day");
    }

    /**
     * Log status m·ªói 5 ph√∫t ƒë·ªÉ theo d√µi
     */
    @Scheduled(cron = "0 */5 * * * ?")
    public void logSystemStatus() {
        log.info("üìä System Status: Scheduled tasks are running normally");
    }
}
